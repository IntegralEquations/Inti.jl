# Specify the packages to be used

using Inti
using LinearAlgebra
using StaticArrays
using Gmsh
using Meshes
using GLMakie
using SpecialFunctions
using GSL
using IterativeSolvers
using LinearMaps

# Define the global parameters for the 3D Helmholz transmission problem

k‚ÇÅ       = 3œÄ
k‚ÇÇ       = 2œÄ
Œª‚ÇÅ       = 2œÄ / k‚ÇÅ
Œª‚ÇÇ       = 2œÄ / k‚ÇÇ	
qorder   = 4 # quadrature order
gorder   = 3 # order of geometrical approximation
nothing #hide

# Let's create the geometry of the scatterer

function gmsh_sphere(; meshsize, order = gorder, radius = 1, visualize = false, name)
    gmsh.initialize()
    gmsh.model.add("sphere-scattering")
    gmsh.option.setNumber("Mesh.MeshSizeMax", meshsize)
    gmsh.option.setNumber("Mesh.MeshSizeMin", meshsize)
    sphere_tag = gmsh.model.occ.addSphere(0, 0, 0, radius)
    rectangle_xy_tag = gmsh.model.occ.addRectangle(-2, -2, 0, 4, 4)
    rectangle_xz_tag = gmsh.model.occ.addRectangle(-2, -2, 0, 4, 4)
    gmsh.model.occ.rotate([(2, rectangle_xz_tag)], 0, 0, 0, 1, 0, 0, œÄ / 2)
    rectangle_yz_tag = gmsh.model.occ.addRectangle(-2, -2, 0, 4, 4)
    gmsh.model.occ.rotate([(2, rectangle_yz_tag)], 0, 0, 0, 0, 1, 0, œÄ / 2)
    disk_xy_tag = gmsh.model.occ.addDisk(0, 0, 0, radius, radius)
    disk_xz_tag = gmsh.model.occ.addDisk(0, 0, 0, radius, radius)
    gmsh.model.occ.rotate([(2, disk_xz_tag)], 0, 0, 0, 1, 0, 0, œÄ / 2)
    outDimTags, _ =
        gmsh.model.occ.cut([(2, rectangle_xy_tag), (2, rectangle_xz_tag)], [(3, sphere_tag)], -1, true, false)
    gmsh.model.occ.synchronize()
    gmsh.model.addPhysicalGroup(3, [sphere_tag], -1, "omega")
    gmsh.model.addPhysicalGroup(2, [dt[2] for dt in outDimTags], -1, "sigma_out")
    gmsh.model.addPhysicalGroup(2, [disk_xy_tag, disk_xz_tag], -1, "sigma_in")
    gmsh.model.mesh.generate(2)
    gmsh.model.mesh.setOrder(order)
    visualize && gmsh.fltk.run()
    gmsh.option.setNumber("Mesh.SaveAll", 1) # otherwise only the physical groups are saved
    gmsh.write(name)
    return gmsh.finalize()
end
nothing #hide

name = joinpath(@__DIR__, "sphere.msh")
meshsize = min(Œª‚ÇÅ, Œª‚ÇÇ) / 10
gmsh_sphere(; meshsize, order = gorder, visualize = false, name)
Inti.clear_entities!() # empty the entity cache
msh = Inti.import_mesh(name; dim = 3)

# Define the domain and the boundary of the scatterer

Œ© = Inti.Domain(e -> "omega" ‚àà Inti.labels(e), Inti.entities(msh))
Œì = Inti.boundary(Œ©)

# Define the quadrature rule on the boundary

Œì_msh = view(msh, Œì)
Q = Inti.Quadrature(Œì_msh; qorder)

# Define the external and internal PDEs

pde‚ÇÅ = Inti.Helmholtz(; k = k‚ÇÅ, dim = 3)
pde‚ÇÇ = Inti.Helmholtz(; k = k‚ÇÇ, dim = 3)

# Define the integral operators

using HMatrices
S‚ÇÅ, D‚ÇÅ = Inti.single_double_layer(;
    pde = pde‚ÇÅ,
    target = Q,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize),
    )

K‚ÇÅ, N‚ÇÅ = Inti.adj_double_layer_hypersingular(;
    pde = pde‚ÇÅ,
    target = Q,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize),
    )

S‚ÇÇ, D‚ÇÇ = Inti.single_double_layer(;
    pde = pde‚ÇÇ,
    target = Q,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize),
    )

K‚ÇÇ, N‚ÇÇ = Inti.adj_double_layer_hypersingular(;
    pde = pde‚ÇÇ,
    target = Q,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize),
    )
nothing

# Taking M√ºller's indirect formulation for the transmission problem we can assemble the following system of equations

L = [
    	I+LinearMap(D‚ÇÅ)-LinearMap(D‚ÇÇ) -LinearMap(S‚ÇÅ)+LinearMap(S‚ÇÇ)
    	LinearMap(N‚ÇÅ)-LinearMap(N‚ÇÇ) I-LinearMap(K‚ÇÅ)+LinearMap(K‚ÇÇ)
	]
nothing

# For validation purposes, let's manufacture outer and inner solutions and set the boundary conditions

# point source for the exterior solution with center at the origin and its normal gradient
u‚ÇÅ = x -> exp(im * k‚ÇÅ * sqrt(dot(x, x))) / sqrt(dot(x, x))
‚àáu‚ÇÅ = x -> (im * k‚ÇÅ - 1/sqrt(dot(x, x)))  * exp(im * k‚ÇÅ * sqrt(dot(x, x))) / sqrt(dot(x, x))^2 * x
# plane wave for the interior solution
ùêù = [1, 0, 0];
u‚ÇÇ = x -> exp(im * k‚ÇÇ * dot(ùêù, x))
‚àáu‚ÇÇ = x -> im * k‚ÇÇ * ùêù * exp(im * k‚ÇÇ * dot(ùêù, x))

# Define the right-hand side of the system of equations

rhs‚ÇÅ = map(Q) do q
    x = q.coords
    return u‚ÇÅ(x) + u‚ÇÇ(x)
end

rhs‚ÇÇ = map(Q) do q
    x = q.coords
    n = q.normal
    return dot(n, ‚àáu‚ÇÅ(x) + ‚àáu‚ÇÇ(x))
end

rhs = [rhs‚ÇÅ; rhs‚ÇÇ]

# Solve the system of equations using GMRES

sol, hist =
    gmres(L, rhs; log = true, abstol = 1e-8, verbose = false, restart = 400, maxiter = 400)
@show hist

nQ = size(Q, 1)
sol_temp = reshape(sol, nQ, 2)
œÜ, œà = sol_temp[:, 1], sol_temp[:, 2]

# Define the solution fields for the exterior and interior solutions

ùíÆ‚ÇÅ, ùíü‚ÇÅ = Inti.single_double_layer_potential(; pde = pde‚ÇÅ, source = Q)
ùíÆ‚ÇÇ, ùíü‚ÇÇ = Inti.single_double_layer_potential(; pde = pde‚ÇÇ, source = Q)

# Obtain the approximate solution of the scattered and transmitted fields
v‚ÇÅ = x -> ùíü‚ÇÅ[œÜ](x) - ùíÆ‚ÇÅ[œà](x)
v‚ÇÇ = x -> -ùíü‚ÇÇ[œÜ](x) + ùíÆ‚ÇÇ[œà](x)

# To check the accuracy of the numerical approximation, we can compute the error
# over points in spheres centered at the origin outside and inside the scatterer

er‚ÇÅ = maximum(1:100) do _
    xÃÇ = rand(Inti.Point3D)|> normalize # an SVector of unit norm
    x = 2 * xÃÇ
    return norm(v‚ÇÅ(x)-u‚ÇÅ(x),Inf)/norm(u‚ÇÅ(x),Inf)
end
@assert er‚ÇÅ < 1e-3 #hide
@info "error with correction = $er‚ÇÅ"

er‚ÇÇ = maximum(1:100) do _
    xÃÇ = rand(Inti.Point3D)|> normalize # an SVector of unit norm
    x = 0.25 * xÃÇ
    return norm(v‚ÇÇ(x)-u‚ÇÇ(x),Inf)#/norm(u‚ÇÇ(x),Inf)
end
@assert er‚ÇÇ < 1e-3 #hide
@info "error with correction = $er‚ÇÇ"

# Visualize the solution

Œ£‚Å∫ = Inti.Domain(e -> "sigma_out" ‚àà Inti.labels(e), Inti.entities(msh))
Œ£‚Åª = Inti.Domain(e -> "sigma_in" ‚àà Inti.labels(e), Inti.entities(msh))

Œ£‚Å∫_msh = view(msh, Œ£‚Å∫)
Œ£‚Åª_msh = view(msh, Œ£‚Åª)

target_out = Inti.nodes(Œ£‚Å∫_msh)
target_in = Inti.nodes(Œ£‚Åª_msh)

# Define an incident field in the form of a plane wave and its derivative

u_inc = x -> exp(im * k‚ÇÅ * dot(ùêù, x))
‚àáu_inc = x -> im * k‚ÇÅ * ùêù * exp(im * k‚ÇÅ * dot(ùêù, x))

# Define the right-hand-side of the system of equations

rhs‚ÇÅ_inc = map(Q) do q
    x = q.coords
    return -u_inc(x)
end

rhs‚ÇÇ_inc = map(Q) do q
    x = q.coords
    n = q.normal
    return dot(n, -‚àáu_inc(x))
end

rhs_inc = [rhs‚ÇÅ_inc; rhs‚ÇÇ_inc]

# Solve the system of equations using GMRES

sol_inc, hist_inc =
    gmres(L, rhs_inc; log = true, abstol = 1e-8, verbose = false, restart = 400, maxiter = 400)
@show hist

nQ = size(Q, 1)
sol_temp_inc = reshape(sol_inc, nQ, 2)
œÜ_inc, œà_inc = sol_temp_inc[:, 1], sol_temp_inc[:, 2]

S‚Å∫, D‚Å∫ = Inti.single_double_layer(;
    pde = pde‚ÇÅ,
    target = target_out,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize, target_location = :outside),
    )

S‚Åª, D‚Åª = Inti.single_double_layer(;
    pde = pde‚ÇÇ,
    target = target_in,
    source = Q,
    compression = (method = :hmatrix, tol = :1e-6),
    correction = (method = :dim, maxdist = 5 * meshsize, target_location = :inside),
    )

w‚ÇÅ = D‚Å∫ * œÜ_inc - S‚Å∫ * œà_inc
w‚ÇÇ = D‚Åª * œÜ_inc - S‚Åª * œà_inc

u·µ¢ = u_inc.(target_out)

nv = length(Inti.nodes(Œì_msh))
colorrange_out = extrema(real(w‚ÇÅ)+real(u·µ¢))
colorrange_int = extrema(real(w‚ÇÇ))
colorrange = (minimum([colorrange_out[1], colorrange_int[1]]), maximum([colorrange_out[2], colorrange_int[2]]))
colormap = :inferno
fig = Figure(resolution = (800, 800))
ax = Axis3(fig[1, 1]; aspect = :data)
viz!(Œ£‚Å∫_msh; colorrange, colormap, color = real(w‚ÇÅ)+real(u·µ¢))
viz!(Œ£‚Åª_msh; colorrange, colormap, color = real(w‚ÇÇ))
viz!(Œì_msh; colorrange, colormap = :bone, color = zeros(nv), interpolate = true, alpha = 0.4)
cb = Colorbar(fig[1, 2]; label = "Re(u)", colormap, colorrange)
fig